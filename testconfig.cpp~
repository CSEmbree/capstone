// NAME: Cameron Embree
// DATE: 5/11/14

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>

using namespace std;


class ConfigData
{
  string _featureVectorPath;
  int _recDuration;
  int _recNumber;
  double _recSampleRate;
  
public:
  // Constructor
  ConfigData( string  configFilePath ); 
  // Destructor  
  ~ConfigData(){}; 

  // Accessors
  string GetFeatureVectorPath();
  int GetRecDuration();
  int GetRecNumber();
  double GetRecSampleRate();
  string ToString();
  bool Equals( ConfigData cd );

private:
  // Mutators
  void SetDefaultState();
  void SetFeatureVectorPath( string featureVectorPath );
  void SetRecDuration( int recDuration );
  void SetRecNumber( int recNumber );  
  void SetRecSampleRate( double sampleRate );

  // Business methods
  bool FileExistCheck( string fileName );
  int ExtractValidData( string fileName );
  bool SetConfigData( string configData );
}; 



//IMPLIMENTATIONS
// Constructor
ConfigData::ConfigData( string configFilePath ) {

  SetDefaultState();
  
  if( FileExistCheck( configFilePath ) == true ) {

    ExtractValidData( configFilePath );

  } else {
    cout<<"ERROR: config file could not be found at: '"<<configFilePath<<"'"<<endl;
  }

}


// Accessors
string ConfigData::GetFeatureVectorPath() {
  return _featureVectorPath;
}

int ConfigData::GetRecDuration() {
  return _recDuration;
}

int ConfigData::GetRecNumber() {
  return _recNumber;
}

double ConfigData::GetRecSampleRate() {
  return _recSampleRate;
}

string ConfigData::ToString() {
  std::stringstream ss;

  ss << "CONFIGURATION FILE DATA: " << endl
     << "\t FeatureVectorPath = \"" << ConfigData::GetFeatureVectorPath() << "\"" << endl
     << "\t RecDuration = " << ConfigData::GetRecDuration() << endl
     << "\t RecNumber = " << ConfigData::GetRecNumber() << endl
     << "\t RecSampleRate = " << ConfigData::GetRecSampleRate() << endl;

  return ss.str();
}


// Mutators
void ConfigData::SetDefaultState(){
  
  int defaultNum = -1;
  string defaultString = "";

  SetFeatureVectorPath( defaultString );
  SetRecDuration( defaultNum );
  SetRecNumber( defaultNum );
  SetRecSampleRate( defaultNum );
}

void ConfigData::SetFeatureVectorPath( string featureVectorPath ) {
  _featureVectorPath = featureVectorPath;
}
void ConfigData::SetRecDuration( int recDuration ) {
  _recDuration = recDuration;
}
void ConfigData::SetRecNumber( int recNumber ) {
  _recNumber = recNumber;
}
void ConfigData::SetRecSampleRate( double recSampleRate ) {
  _recSampleRate = recSampleRate;
}


// Business Methods
bool ConfigData::FileExistCheck( string fileName ) {
  std::ifstream infile( fileName.c_str(), std::ifstream::in );

  return infile.good();
}

int ConfigData::ExtractValidData( string fileName ) {
  std::ifstream inFile( fileName.c_str() );
  std::string line;  
  std::string type, val;

  while (std::getline(inFile, line)) {
    
    if(line.size() > 0) {
      if(line.at(0) != '#') {
	
	SetConfigData(line);
      }
    }
  }
  
  return 0;
}

bool ConfigData::SetConfigData( string configDataRaw ) {
  //cout << "DEBUG: SETTING CONFIG: "<< configData << endl;
  
  std::istringstream configData(configDataRaw);
  
  std::string type, val;
  configData >> type >> val;
  cout << "TEST: "<<" type: "<<type<<", val: "<<val<<endl;  

  return false;
}



int main( int argc, const char* argv[] ) 
{
  ConfigData configDat("config");
  cout << configDat.ToString();

  return 0;
}
